{
  "webhooks": {
    "main-menu-title": "Webhooks",
    "blades": {
      "webhooks-list": {
        "title": "Webhook List",
        "subtitle": "List of user-defined webhooks",
        "labels": {
          "name": "Name",
          "active": "Active",
          "percent-success-calls": "Successful Call %",
          "unresolved-errors": "Unresolved errors",
          "total-count": "Total call count"
        }
      },
      "webhook-detail": {
        "title": "Webhook List",
        "subtitle": "Manage webhook settings and details",
        "labels": {
          "name": "Name",
          "is-active": "Activate",
          "url": "URL",
          "event": "Event",
          "additional-fields": "Additional fields ({{fields_count}}/10)",
          "warning": "We found issues with your webhooks, e.g., multiple event subscription. Currently, the new UX limitations allow you to select only one event to subscribe to, per webhook."
        },
        "discription": {
          "webhook": "Webhooks offer you a way to quickly find out what has been changed within your Virto Commerce ecosystem. Select the events you want to follow, and we will send you a detailed notification to the URL you specified once any such event occurs.",
          "name": "This webhook's display name",
          "url": "The URL being called on each event trigger",
          "event": "Select the event you want to get notified on.",
          "specify-payload": "This allows you to specify additional data this webhook will include in the report.",
          "specify-payload-note": "Note",
          "specify-payload-note-content": "The ID and ObjectType properties are included into the report by default and will always be there."
        },
        "placeholders": {
          "name": "Specify webhook name",
          "event": "Please select"
        }
      },
      "webhook-error-list": {
        "title": "Webhook errors",
        "subtitle": "List of all unresolved errors for this webhook",
        "labels": {
          "event": "Event",
          "attempt-count": "Attempt Count",
          "created": "Created",
          "last-attempt": "Latest attempt",
          "error": "Error"
        }
      }
    },
    "widgets": {
      "errors-widget": {
        "title": "Error count"
      }
    },
    "dialogs": {
      "setting-save": {
        "title": "Save changes",
        "message": "This webhook has been modified. Do you want to save changes?"
      },
      "setting-delete": {
        "title": "Confirm Delete",
        "message": "Are you sure you want to delete this webhook?"
      },
      "feed-delete": {
        "title": "Confirm Delete",
        "message": "Are you sure you want to delete this feed?"
      }
    },
    "events": {
      "types": {
        "VirtoCommerce.Platform.Core.Security.Events.UserChangedEvent": "User has been changed",
        "VirtoCommerce.Platform.Core.Security.Events.UserChangingEvent": "User is being changed",
        "VirtoCommerce.Platform.Core.Security.Events.UserPasswordChangedEvent": "Password has been changed",
        "VirtoCommerce.Platform.Core.Security.Events.UserResetPasswordEvent": "User reset their password",
        "VirtoCommerce.Platform.Core.Security.Events.UserLogoutEvent": "User logged out",
        "VirtoCommerce.Platform.Core.Security.Events.UserLoginEvent": "User logged in",
        "VirtoCommerce.Platform.Core.Settings.Events.ObjectSettingChangedEvent": "Setting object has been changed",
        "VirtoCommerce.Platform.Core.Events.DomainEvent": "Domain has been changed",
        "VirtoCommerce.QuoteModule.Core.Events.QuoteRequestChangeEvent": "Quote Request has been changed",
        "VirtoCommerce.PricingModule.Core.Events.PriceChangedEvent": "Price has been changed",
        "VirtoCommerce.PricingModule.Core.Events.PriceChangingEvent": "Price is being changed",
        "VirtoCommerce.OrdersModule.Core.Events.OrderChangedEvent": "Order has been changed",
        "VirtoCommerce.OrdersModule.Core.Events.OrderChangeEvent": "Order is being changed",
        "VirtoCommerce.CustomerModule.Core.Events.MemberChangedEvent": "Member has been changed",
        "VirtoCommerce.CustomerModule.Core.Events.MemberChangingEvent": "Member is being changed",
        "VirtoCommerce.InventoryModule.Core.Events.InventoryChangedEvent": "Inventory has been changed",
        "VirtoCommerce.InventoryModule.Core.Events.InventoryChangingEvent": "Inventory is being changed",
        "VirtoCommerce.InventoryModule.Core.Events.FulfillmentCenterChangedEvent": "Fulfillment Center has been changed",
        "VirtoCommerce.InventoryModule.Core.Events.FulfillmentCenterChangingEvent": "Fulfillment Center is being changed",
        "VirtoCommerce.CatalogModule.Core.Events.CategoryChangedEvent": "Category has been changed",
        "VirtoCommerce.CatalogModule.Core.Events.CategoryChangingEvent": "Category is being changed",
        "VirtoCommerce.CatalogModule.Core.Events.PropertyChangingEvent": "Property is being changed",
        "VirtoCommerce.CatalogModule.Core.Events.PropertyChangedEvent": "Property has been changed",
        "VirtoCommerce.CatalogModule.Core.Events.ProductChangedEvent": "Product has been changed",
        "VirtoCommerce.CatalogModule.Core.Events.CatalogChangedEvent": "Catalog has been changed",
        "VirtoCommerce.CatalogModule.Core.Events.ProductChangingEvent": "Product is being changed",
        "VirtoCommerce.CatalogModule.Core.Events.CatalogChangingEvent": "Catalog is being changed",
        "VirtoCommerce.CartModule.Core.Events.CartChangedEvent": "Cart has been changed",
        "VirtoCommerce.CartModule.Core.Events.CartChangeEvent": "Cart is being changed",
        "VirtoCommerce.SubscriptionModule.Core.Events.PaymentPlanChangedEvent": "Payment Plan has been changed",
        "VirtoCommerce.SubscriptionModule.Core.Events.SubscriptionChangedEvent": "Subscription has been changed",
        "VirtoCommerce.SubscriptionModule.Core.Events.PaymentPlanChangingEvent": "Payment Plan is being changed",
        "VirtoCommerce.SubscriptionModule.Core.Events.SubscriptionChangingEvent": "Subscription is being changed",
        "VirtoCommerce.ContentModule.Core.Events.MenuLinkListChangedEvent": "Menu link list has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.CouponChangedEvent": "Coupon has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.DynamicContentFolderChangedEvent": "Dynamic content folder has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.DynamicContentItemChangedEvent": "Dynamic content item has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.DynamicContentPlaceChangedEvent": "Dynamic content place has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.DynamicContentPublicationChangedEvent": "Dynamic content publication has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.PromotionChangedEvent": "Promotion has been changed",
        "VirtoCommerce.MarketingModule.Core.Events.PromotionUsageChangedEvent": "Promotion usage has been changed",
        "VirtoCommerce.NotificationsModule.Core.Events.NotificationChangedEvent": "Notification has been changed",
        "VirtoCommerce.NotificationsModule.Core.Events.NotificationChangingEvent": "Notification is being changed",
        "VirtoCommerce.NotificationsModule.Core.Events.NotificationMessageChangedEvent": "Notification message has been changed",
        "VirtoCommerce.NotificationsModule.Core.Events.NotificationMessageChangingEvent": "Notification message is being changed",
        "VirtoCommerce.StoreModule.Core.Events.StoreChangedEvent": "Store has been changed",
        "VirtoCommerce.CustomerReviews.Core.Events.CustomerReviewChangedEvent": "Customer review has been changed",
        "VirtoCommerce.CustomerReviews.Core.Events.ReviewStatusChangedEvent": "Review status has been changed",
        "VirtoCommerce.DynamicAssociationsModule.Core.Events.AssociationChangedEvent": "Association has been changed",
        "VirtoCommerce.DynamicAssociationsModule.Core.Events.AssociationChangingEvent": "Association is being changed"
      }
    }
  },
  "permissions": {
    "webhooks:access": "Open Webhook menu",
    "webhooks:read": "View webhook related data",
    "webhooks:feed:read": "View webhook logs",
    "webhooks:execute": "Manually send webhooks",
    "webhooks:update": "Create or update webhooks",
    "webhooks:delete": "Delete webhooks"
  },
  "settings": {
    "Webhooks": {
      "General": {
        "SendRetryCount": {
          "description": "In case the HTTP request sending the webhook notification fails by any reason, the operation will be repeated X number or times or until it succeeds. The intervals between the attempts are the following (in minutes): 1, 2, 4, â€¦, 2^N (minutes)",
          "title": "Number of retry attempts to send the webhook notification in case the first attempt fails"
        }
      }
    }
  }
}
